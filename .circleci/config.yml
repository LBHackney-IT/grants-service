version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.4
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node-executor:
    docker:
      - image: cimg/node:14.18.3-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  owasp-zap-baseline-scan:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - *attach_workspace

      - run:
          name: Run application in background
          command: NODE_ENV=production yarn start
          background: true

      - run:
          name: Pull owasp zap docker image
          command: docker pull owasp/zap2docker-stable:2.10.0

      - run:
          name: ZAP baseline test of application
          # It will exit with codes of:
          # 0: Success
          # 1: At least 1 FAIL
          # 2: At least one WARN and no FAILs
          # 3: Any other failure
          # Link to above:https://github.com/zaproxy/zaproxy/blob/main/docker/zap-baseline.py#L31-L35
          command: |
            (
              docker run -t owasp/zap2docker-stable:2.10.0 zap-baseline.py \
              -j \
              -u https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/zap-baseline.conf \
              -t http://$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1):3000 || \
              if [[ $? == 0 || $? == 2 ]]; then exit 0; else exit 1; fi;
            )

  build-deploy-staging:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: build
          command: yarn build
          no_output_timeout: 45m
      - run:
          name: add-dependencies
          command: yarn --production=true && yarn add serverless db-migrate db-migrate-pg
      - run:
          name: deploy
          command: yarn deploy --stage staging
          no_output_timeout: 45m
      - run:
          name: migrate
          command: yarn remote:migrate --stage staging

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: build
          command: yarn build
          no_output_timeout: 45m
      - run:
          name: add-dependencies
          command: yarn --production=true && yarn add serverless db-migrate db-migrate-pg
      - run:
          name: deploy
          command: yarn deploy --stage production
          no_output_timeout: 45m
      - run:
          name: migrate
          command: yarn remote:migrate --stage production

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - permit-deploy-staging:
          type: approval
          filters:
            branches:
              only: main
      - assume-role-staging:
          context: api-assume-role-regen-apps-staging-context
          requires:
            - permit-deploy-staging
          filters:
            branches:
              only: main
      - build-deploy-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: main
      - permit-deploy-production:
          type: approval
          requires:
            - build-deploy-staging
      - assume-role-production:
          context: api-assume-role-regen-apps-production-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: main
      - build-deploy-production:
          requires:
            - assume-role-production
