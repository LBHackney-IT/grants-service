service: grants-service

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
  stage: ${opt:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:ListBucket
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:custom.bucket}/*'

package:
  individually: true
  exclude:
    - ./**

resources:
  Resources:
    grantsServiceGrantSupportingDocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - POST
              MaxAge: 3000

    grantsServiceGrantDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow access
        VpcId: ${self:custom.vpc-id.${self:provider.stage}}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    grantsServiceGrantDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: 'Grants Service Grant DB Subnet Group'
        DBSubnetGroupName: 'grantsServiceGrantDb-${self:provider.stage}'
        SubnetIds:
          - ${self:custom.subnets.${self:provider.stage}-1}
          - ${self:custom.subnets.${self:provider.stage}-2}
        Tags:
          - Key: 'Name'
            Value: 'grantsServiceGrantDb'

    grantsServiceGrantDb:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 5
        DBInstanceIdentifier: '${self:service}-db-${self:provider.stage}'
        DBInstanceClass: 'db.t3.small'
        DBName: ${self:custom.dbname}
        DeletionProtection: true
        Engine: 'postgres'
        EngineVersion: '11.22'
        CACertificateIdentifier: 'rds-ca-rsa2048-g1'
        MasterUsername: ${env:MASTER_USERNAME}
        MasterUserPassword: ${env:MASTER_USER_PASSWORD}
        MultiAZ: true
        PubliclyAccessible: false
        StorageEncrypted: true
        DBSubnetGroupName: 'grantsServiceGrantDb-${self:provider.stage}'
        VPCSecurityGroups:
          - Fn::GetAtt:
              - grantsServiceGrantDbSecurityGroup
              - GroupId
        Tags:
          - Key: 'Name'
            Value: 'grantsServiceGrantDb'
          - Key: 'STAGE'
            Value: ${self:provider.stage}
          - Key: 'Test'
            Value: 'staging-cci-applied'
      DeletionPolicy: 'Snapshot'

custom:
  dbname: grantsServiceGrantDb
  bucket: ${self:service}-supporting-documents-${self:provider.stage}
  vpc-id:
    staging: vpc-0047c1ec06d524b64
    production: vpc-0c9c2cbf1865adb9e
  subnets:
    staging-1: subnet-034d259953e54531a
    staging-2: subnet-0e0152a2fc2b42498
    production-1: subnet-056356c011224f114
    production-2: subnet-067865bb76395b74e
